{
  "name": "Photofy",
  "tagline": "A gem to provide simple method to do fileupload of pictures and provides getter setter methods of it and save on model object commit",
  "body": "## Photofy\r\nA simple ruby gem providing photo fields to rails model\r\n\r\n## Installation\r\nAdd this line to your application's Gemfile:\r\n\r\n`gem 'photofy'`\r\n\r\nAnd then execute:\r\n\r\n`$ bundle`\r\n\r\nOr install it yourself as:\r\n\r\n`$ gem install photofy`\r\n\r\n\r\n## Usage\r\nAdd photo field(s) to model by adding lines like\r\n* `photofy(:collage)`\r\n> * `collage` : Getter,\r\n> * `collage?` : Returns true if assignment is having value other than nil else false,\r\n> * `collage =` : Setter. Acceptable inputs are file upload(ActionDispatch::Http::UploadedFile), file and String(format validation is ignored),\r\n> * `collage_path` : File path of assignment,\r\n> * `collage_s3publicpath` : Public aws s3 url provider if (aws s3 is used as storage)\r\n> * `collage_persisted?` : Gives true if provided file/data is stored on disk,\r\n> * `collage_store!` : To store provided file/data on disk,\r\n> * `collage_destroy!` : To destroy stored file/data from disk\r\n\r\n* `photofy(:collage_sec, {parent_photo_field: :collage})`\r\n> * Automatically creates a collage_sec photo field from :collage parent field\r\n\r\n* `photofy(:stamp, {image_processor: Proc.new { |img| img.scale(25, 25) }})`\r\n> * Process image to scale(refer imagemagick/rmagick for other image manipulations) of 25x25px when image is saved.\r\n\r\n* `after_photofy :collage, :post_card, Proc.new { |img| img.scale(450, 200) }`\r\n> * Creates 'post_card' photo field by taking source from 'collage' and scaling it to 450x200px.\r\n\r\nEnables aws s3 as backend storage.\r\n* `photofy_s3_storage({access_key_id: 'xxxxxxxx',secret_access_key: 'xxxxxxxx'}, {bucket: 'test_bucket'})`\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}